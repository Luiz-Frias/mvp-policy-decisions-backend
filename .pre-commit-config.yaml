repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-merge-conflict
      - id: debug-statements

  - repo: https://github.com/psf/black
    rev: 24.2.0
    hooks:
      - id: black
        language_version: python3

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black"]

  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: v0.2.2
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [
          # üéØ PEAK EXCELLENCE: Comprehensive type coverage (types-all alternative)
          # üö® ROOT CAUSE FIX: types-all broken due to yanked types-pkg-resources dependency
          # SOLUTION: Essential type packages + runtime dependencies for type checking

          # Core type stubs
          "types-setuptools",
          "types-requests",
          "types-PyYAML",
          "types-urllib3",
          "types-toml",
          "types-python-dateutil",
          "types-pytz",
          "types-jsonschema",
          "types-click",
          "types-colorama",
          "types-tqdm",
          "types-mock",
          "types-python-slugify",
          "types-beautifulsoup4",
          "types-lxml",
          "types-Pillow",
          "types-aiofiles",
          "types-redis",
          "types-passlib",

          # Runtime dependencies needed for type checking
          # These packages include their own type information
          "pytest>=7.0,<8.0",
          "pytest-benchmark>=4.0,<5.0",
          "pydantic>=2.5,<3.0",
          "beartype>=0.17,<1.0",
          "memray>=1.10,<2.0"
        ]
        args: [--config-file=pyproject.toml, --strict]

  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.7
    hooks:
      - id: bandit
        args: ['-c', 'pyproject.toml']
        additional_dependencies: ["bandit[toml]"]

  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--config=pyproject.toml]

  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        args: [--py311-plus]

  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        types_or: [yaml, markdown, json]
        exclude: '^(\.pre-commit-config\.yaml)$'

  # Safety check using local hook since we use uv, not poetry
  - repo: local
    hooks:
      - id: safety-check
        name: Safety security vulnerabilities check
        entry: bash -c 'export PATH="/usr/local/bin:/opt/miniconda3/bin:$HOME/.local/bin:$PATH"; if ! command -v uv >/dev/null 2>&1; then echo "‚ö†Ô∏è  uv not found in PATH, skipping safety check"; exit 0; fi; if ! uv run --quiet safety --version >/dev/null 2>&1; then echo "‚ö†Ô∏è  safety not available, installing..."; uv add --dev safety >/dev/null 2>&1 || true; fi; uv export --format requirements-txt 2>/dev/null | uv run safety check --stdin --json 2>/dev/null || echo "‚ö†Ô∏è  Safety check completed with warnings"'
        language: system
        pass_filenames: false
        files: ^(pyproject\.toml|uv\.lock)$
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package.lock.json

  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.16.0
    hooks:
      - id: commitizen
        stages: [commit-msg]
