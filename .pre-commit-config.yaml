repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-merge-conflict
      - id: debug-statements

  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        language_version: python3
        # Focus on production code only
        exclude: ^(scripts/|docs/|examples/|dev-tools/)

  - repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
      - id: isort
        args: ["--profile", "black"]
        # Focus on production code only
        exclude: ^(scripts/|docs/|examples/|dev-tools/)

  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: v0.12.1
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
        # Focus on production code only
        exclude: ^(scripts/|docs/|examples/|dev-tools/)

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.16.1
    hooks:
      - id: mypy
        additional_dependencies: [
          # üõ°Ô∏è MASTER RULESET: Mirror UV Environment Dependencies
          # SOLUTION: Exact match of our UV environment for consistent type checking

          # Core application dependencies (exact versions to match UV environment)
          "fastapi==0.115.14",
          "pydantic==2.11.7",
          "pydantic-settings==2.10.1",
          "asyncpg==0.29.0",
          "sqlalchemy>=2.0.0",
          "redis==5.3.0",
          "httpx==0.28.1",
          "bcrypt>=4.0.0",
          "pyjwt>=2.8.0",
          "beartype>=0.17.0",

          # Testing dependencies
          "pytest>=7.0.0",
          "pytest-asyncio>=0.21.0",
          "pytest-benchmark>=4.0.0",

          # Type stubs for packages without built-in types
          "types-passlib>=1.7",
          "types-psutil>=7.0.0.20250601",
          "types-setuptools>=69.0",
          "types-requests>=2.31",
          "types-pyyaml>=6.0",
          "types-urllib3>=1.26",
          "types-toml>=0.10",
          "types-python-dateutil>=2.8",
          "types-pytz>=2023.3",
          "types-jsonschema>=4.17",
          "types-click>=7.1",
          "types-colorama>=0.4",
          "types-tqdm>=4.66",
          "types-mock>=5.1",
          "types-python-slugify>=8.0",
          "types-beautifulsoup4>=4.12",
          "types-lxml>=2023.10",
          "types-pillow>=10.0",
          "types-aiofiles>=23.2",
        ]
        args: [--config-file=pyproject.toml, --show-error-codes]
        # Focus on production code - exclude dev tools and scripts
        exclude: ^(tests/|scripts/|alembic/|docs/|examples/|dev-tools/)

  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.5
    hooks:
      - id: bandit
        args: ['-c', 'pyproject.toml']
        additional_dependencies: ["bandit[toml]"]
        # Focus on production code only
        exclude: ^(scripts/|docs/|examples/|dev-tools/|tests/)

  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--config=pyproject.toml]
        # Focus on production code only
        exclude: ^(scripts/|docs/|examples/|dev-tools/|tests/)

  - repo: https://github.com/asottile/pyupgrade
    rev: v3.20.0
    hooks:
      - id: pyupgrade
        args: [--py311-plus]
        # Focus on production code only
        exclude: ^(scripts/|docs/|examples/|dev-tools/)

  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        types_or: [yaml, markdown, json]
        args: [--no-parallel]
        exclude: '^(\.pre-commit-config\.yaml)$'

  # Safety check using local hook since we use uv, not poetry
  - repo: local
    hooks:
      - id: safety-check
        name: Safety security vulnerabilities check
        entry: bash -c 'export PATH="/usr/local/bin:/opt/miniconda3/bin:$HOME/.local/bin:$PATH"; if ! command -v uv >/dev/null 2>&1; then echo "‚ö†Ô∏è  uv not found in PATH, skipping safety check"; exit 0; fi; if ! uv run --quiet safety --version >/dev/null 2>&1; then echo "‚ö†Ô∏è  safety not available, installing..."; uv add --dev safety >/dev/null 2>&1 || true; fi; uv export --format requirements-txt 2>/dev/null | uv run safety check --stdin --json 2>/dev/null || echo "‚ö†Ô∏è  Safety check completed with warnings"'
        language: system
        pass_filenames: false
        files: ^(pyproject\.toml|uv\.lock)$
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package.lock.json

  - repo: https://github.com/commitizen-tools/commitizen
    rev: v4.8.3
    hooks:
      - id: commitizen
        stages: [commit-msg]

  - repo: local
    hooks:
      - id: fast-tests
        name: Run fast unit tests (marked not slow)
        entry: bash -c 'pytest -m "not slow and not benchmark and not database"'
        language: system
        pass_filenames: false
        stages: [commit]
      - id: perf-bench-smoke
        name: Run benchmark smoke suite
        entry: bash -c 'pytest -q -m benchmark --benchmark-only --benchmark-min-time=0.01'
        language: system
        pass_filenames: false
        stages: [commit]

  - repo: local
    hooks:
      - id: full-test-pre-push
        name: Run full test + perf suite on pre-push
        entry: bash -c 'pytest -q && pytest -q -m benchmark --benchmark-only'
        language: system
        pass_filenames: false
        stages: [push]
