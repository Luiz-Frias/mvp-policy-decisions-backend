;; PgBouncer configuration for high-performance connection pooling
;; Optimized for 10,000 concurrent users

[databases]
;; Main database with transaction pooling for OLTP workload
pd_prime_demo = host=localhost port=5432 dbname=pd_prime_demo

;; Read replica with session pooling for longer queries
pd_prime_demo_read = host=read-replica.example.com port=5432 dbname=pd_prime_demo

;; Admin pool with dedicated resources
pd_prime_demo_admin = host=localhost port=5432 dbname=pd_prime_demo pool_size=10 reserve_pool=5

[pgbouncer]
;; Where to listen for connections
listen_addr = *
listen_port = 6432

;; Authentication settings
auth_type = md5
auth_file = /etc/pgbouncer/userlist.txt

;; Pool configuration optimized for 10,000 concurrent users
;; Based on performance benchmarking results
pool_mode = transaction

;; Connection limits optimized for high throughput based on performance audit
;; max_client_conn: Maximum client connections to pgbouncer
;; default_pool_size: Optimized based on benchmark showing pool_size=30 optimal for 50 concurrent
;; min_pool_size: Higher minimum to avoid cold start penalties (audit showed issues)
;; reserve_pool_size: Larger reserve for burst traffic and recovery
max_client_conn = 10000
default_pool_size = 40
min_pool_size = 20
reserve_pool_size = 15
reserve_pool_timeout = 1

;; Maximum database connections
;; Should be less than PostgreSQL max_connections
max_db_connections = 100
max_user_connections = 100

;; Connection lifecycle
;; server_lifetime: Maximum connection age (1 hour)
;; server_idle_timeout: Close idle connections (10 minutes)
server_lifetime = 3600
server_idle_timeout = 600

;; Query handling optimized based on performance audit
;; query_timeout: Maximum query execution time (reduced for faster failure detection)
;; query_wait_timeout: Maximum time to wait for connection (reduced based on high timeout rates)
;; client_idle_timeout: Reduced to free up connections faster
;; client_login_timeout: Reduced for faster connection establishment
query_timeout = 25
query_wait_timeout = 5
client_idle_timeout = 30
client_login_timeout = 5

;; Cancel/terminate handling
;; Cancel requests need session pooling, so we handle differently
;; For transaction pooling, cancellations are limited
cancel_wait_timeout = 10

;; Connection settings
;; TCP keepalive to detect broken connections
tcp_keepalive = 1
tcp_keepcnt = 3
tcp_keepidle = 30
tcp_keepintvl = 10

;; Performance tuning
;; pkt_buf: Packet buffer size (important for large queries)
;; max_packet_size: Maximum packet size
;; listen_backlog: TCP listen queue
pkt_buf = 8192
max_packet_size = 2147483647
listen_backlog = 4096

;; DNS settings
;; Cache DNS lookups for better performance
dns_max_ttl = 3600
dns_nxdomain_ttl = 60

;; Resource management
;; Disable query tracking for better performance
;; Enable only if needed for debugging
disable_pqexec = 0
application_name_add_host = 1

;; Logging configuration
;; Minimize logging in production for performance
logfile = /var/log/pgbouncer/pgbouncer.log
pidfile = /var/run/pgbouncer/pgbouncer.pid

;; Log levels: 1=error, 2=warning, 3=info, 4=debug
log_connections = 0
log_disconnections = 0
log_pooler_errors = 1
log_stats = 1
stats_period = 60

;; Admin users who can access SHOW commands
admin_users = pgbouncer_admin

;; Stats users who can access statistics
stats_users = pgbouncer_stats, pgbouncer_monitor

;; Ignore startup parameters from clients
;; This improves compatibility with various drivers
ignore_startup_parameters = extra_float_digits, options

;; Unix socket settings (if using local connections)
unix_socket_dir = /var/run/postgresql
unix_socket_mode = 0777
unix_socket_group =

;; Advanced features for high load
;; server_reset_query: Run after each transaction
;; server_reset_query_always: Run even on clean connections
server_reset_query = DISCARD ALL
server_reset_query_always = 0

;; TLS/SSL Configuration (for production)
;; Uncomment and configure for secure connections
;client_tls_sslmode = require
;client_tls_ca_file = /etc/pgbouncer/root.crt
;client_tls_key_file = /etc/pgbouncer/server.key
;client_tls_cert_file = /etc/pgbouncer/server.crt
;server_tls_sslmode = require
;server_tls_ca_file = /etc/pgbouncer/root.crt

;; Special handling for prepared statements
;; Transaction pooling doesn't support prepared statements well
;; Consider session pooling for applications using prepared statements heavily
max_prepared_statements = 0
