version: '3.8'

services:
  # PgBouncer - Connection pooling proxy
  pgbouncer:
    image: pgbouncer/pgbouncer:1.22
    container_name: policy_core_pgbouncer
    restart: unless-stopped
    environment:
      # These will be overridden by .env file
      DATABASES_HOST: ${DATABASE_HOST:-host.docker.internal}
      DATABASES_PORT: ${DATABASE_PORT:-5432}
      DATABASES_DATABASE: ${DATABASE_NAME:-policy_core}
      DATABASES_USER: ${DATABASE_USER:-postgres}
      DATABASES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "6432:6432"
    volumes:
      - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
    networks:
      - policy_core_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 6432 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: policy_core_app
    restart: unless-stopped
    env_file:
      - .env  # Load environment variables
    environment:
      # Override database connection to use PgBouncer
      DATABASE_HOST: pgbouncer
      DATABASE_PORT: 6432
      # Redis connection
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8080:8080"  # API
      - "8081:8081"  # WebSocket
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - policy_core_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and connection management
  redis:
    image: redis:7-alpine
    container_name: policy_core_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - policy_core_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data

networks:
  policy_core_network:
    driver: bridge

volumes:
  redis_data: