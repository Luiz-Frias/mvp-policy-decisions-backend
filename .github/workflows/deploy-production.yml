name: 🚀 Production Deployment

on:
  push:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - "*.md"
      - ".gitignore"
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even if tests fail"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-and-security:
    name: 🧪 Test & Security Scan
    runs-on: ubuntu-latest
    outputs:
      tests-passed: ${{ steps.tests.outputs.success }}
      security-passed: ${{ steps.security.outputs.success }}
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v2

      - name: 🐍 Setup Python
        run: uv python install 3.11

      - name: 📦 Install dependencies
        run: uv sync --all-extras --dev

      - name: 🧪 Run tests
        id: tests
        run: |
          set +e
          uv run pytest tests/ -v --tb=short --cov=src --cov-report=term --cov-report=xml
          TEST_RESULT=$?
          if [ $TEST_RESULT -eq 0 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "✅ All tests passed"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "❌ Some tests failed"
          fi
          exit 0

      - name: 🔒 Security scan
        id: security
        run: |
          set +e
          echo "Running security scans..."

          # Bandit for Python security issues
          uv run bandit -r src/ -f json -o bandit-report.json || true

          # Safety for known vulnerabilities
          uv run safety check --json --output safety-report.json || true

          # Check for high severity issues
          HIGH_SEVERITY=$(cat bandit-report.json | jq '[.results[] | select(.issue_severity == "HIGH")] | length' 2>/dev/null || echo "0")

          if [ "$HIGH_SEVERITY" -eq 0 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "✅ Security scan passed"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "❌ High severity security issues found: $HIGH_SEVERITY"
          fi

      - name: 📤 Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  build-and-push:
    name: 🏗️ Build & Push Image
    runs-on: ubuntu-latest
    needs: [test-and-security]
    if: >
      (needs.test-and-security.outputs.tests-passed == 'true' &&
       needs.test-and-security.outputs.security-passed == 'true') ||
      github.event.inputs.force_deploy == 'true'
    outputs:
      image-tag: ${{ steps.image.outputs.tag }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🚀 Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 📝 Set image tag
        id: image
        run: |
          TAG=${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Built image: $TAG"

  deploy-railway:
    name: 🚂 Deploy to Railway
    runs-on: ubuntu-latest
    needs: [build-and-push]
    environment: production
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🚂 Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: 🚀 Deploy to Railway
        id: deploy
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          echo "Deploying to Railway..."

          # Set the Docker image to deploy
          railway deploy --detach

          echo "✅ Deployment initiated"
          echo "url=https://mvp-policy-decisions-backend-production.up.railway.app" >> $GITHUB_OUTPUT

      - name: ⏳ Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60

  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: [deploy-railway]
    steps:
      - name: 🔍 Health check
        run: |
          URL="${{ needs.deploy-railway.outputs.deployment-url }}"

          echo "Checking health endpoint: $URL/api/v1/health"

          # Wait for service to be ready
          for i in {1..10}; do
            if curl -f -s "$URL/api/v1/health" > /dev/null; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "⏳ Health check failed, attempt $i/10. Waiting 30s..."
              sleep 30
            fi

            if [ $i -eq 10 ]; then
              echo "❌ Health check failed after 10 attempts"
              exit 1
            fi
          done

      - name: 🧪 Smoke tests
        run: |
          URL="${{ needs.deploy-railway.outputs.deployment-url }}"

          echo "Running smoke tests against $URL"

          # Test API endpoints
          echo "Testing health endpoint..."
          curl -f "$URL/api/v1/health" | jq '.'

          echo "Testing docs endpoint..."
          curl -f -I "$URL/docs"

          echo "Testing OpenAPI spec..."
          curl -f "$URL/openapi.json" > /dev/null

          echo "✅ All smoke tests passed"

  performance-check:
    name: ⚡ Performance Validation
    runs-on: ubuntu-latest
    needs: [deploy-railway]
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v2

      - name: 🐍 Setup Python
        run: uv python install 3.11

      - name: 📦 Install dependencies
        run: uv sync --all-extras --dev

      - name: 🔥 Load test
        run: |
          URL="${{ needs.deploy-railway.outputs.deployment-url }}"

          echo "Running load test against $URL"

          # Install load testing tools if needed
          pip install locust

          # Create a simple load test script
          cat > loadtest.py << EOF
          from locust import HttpUser, task, between

          class ApiUser(HttpUser):
              wait_time = between(1, 3)

              @task
              def health_check(self):
                  self.client.get("/api/v1/health")

              @task
              def docs(self):
                  self.client.get("/docs")
          EOF

          # Run load test for 60 seconds with 10 users
          locust -f loadtest.py --host="$URL" --users 10 --spawn-rate 2 --run-time 60s --headless --html=load-test-report.html

      - name: 📤 Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: load-test-report.html
          retention-days: 30

  notify-success:
    name: 📢 Notify Success
    runs-on: ubuntu-latest
    needs: [deploy-railway, health-check, performance-check]
    if: success()
    steps:
      - name: 🎉 Success notification
        run: |
          echo "🚀 Production deployment successful!"
          echo "URL: ${{ needs.deploy-railway.outputs.deployment-url }}"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Time: $(date)"

  notify-failure:
    name: 📢 Notify Failure
    runs-on: ubuntu-latest
    needs: [test-and-security, build-and-push, deploy-railway, health-check, performance-check]
    if: failure()
    steps:
      - name: ❌ Failure notification
        run: |
          echo "❌ Production deployment failed!"
          echo "Check the workflow logs for details."
          echo "Time: $(date)"

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [notify-success, notify-failure]
    if: always()
    steps:
      - name: 🧹 Cleanup old images
        run: |
          echo "Cleaning up old container images..."
          # Add cleanup logic for old images if needed
          echo "✅ Cleanup completed"
