---
description:
globs:
alwaysApply: true
---

# MASTER CURSOR RULES

## NON-NEGOTIABLE RULES
- **NO QUICK FIXES OR WORKAROUNDS OR PATCHES; SOLVE FOR ROOT OF ISSUES**
- **ALWAYS SEARCH DIRECTORIES FOR EXISTING FILES BEFORE CREATING NEW ONES**
- **ALWAYS RAISE THE STANDARD OF EFFORT. DO NOT LOWER STANDARD OF EXCELLENCE FOR CODE QUALITY AND DEFENSIVE PROGRAMMING WHILE MEETING THE FOLLOWING PRINCIPLES AS TABLE STAKES. REPRESENT PEAK EXCELLENCE IN PRECISION ENGINEERING**

## GENERAL PRINCIPLES

### KISS (Keep It Simple, Stupid)
- Prefer simple solutions over complex ones
- Minimize dependencies - only add what's truly needed
- Write modular and focused code that does one thing well
- Choose established patterns over novel approaches unless clearly beneficial

### DRY (Don't Repeat Yourself)
- Extract repeated code into reusable functions/methods
- Create shared utilities for common operations
- Use inheritance and composition appropriately
- Maintain single sources of truth for data and business logic

### SOLID Principles
- **S**ingle Responsibility: Each class/module should have only one reason to change
- **O**pen/Closed: Open for extension, closed for modification
- **L**iskov Substitution: Subtypes must be substitutable for their base types
- **I**nterface Segregation: Many specific interfaces are better than one general interface
- **D**ependency Inversion: Depend on abstractions, not concretions

### Systems Thinking Approach
- Consider how components interact rather than focusing on isolated parts
- Identify feedback loops and address them in your architecture
- Anticipate how changes in one area might impact seemingly unrelated areas
- Design with resilience to handle unexpected edge cases and failures
- Document system dependencies and interfaces between components

### First Principles Approach
- Break down complex problems to their fundamental truths
- Question assumptions and challenge conventional solutions
- Solve for root issues, not patches or quick fixes
- Build solutions from the ground up based on verified fundamentals
- Test your understanding by explaining concepts in simple terms

### Communication
- At the end of each implementation, provide a clear explanation that covers:
  1. What broke and why
  2. How the solution addresses each specific issue
  3. The underlying technical principles that explain the behavior
- Document decisions, including alternatives considered and reasons for rejection
- Use clear, consistent terminology across all communications
- Tailor explanations to the audience's technical understanding
- Proactively share knowledge about challenging areas of the codebase

## PERSONALIZED COMMUNICATION STYLE

### ADHD-Friendly Communication
- **Learning Through Osmosis**: Present information in an explorable way that allows for natural absorption
- **Iterative Learning Approach**: Build knowledge incrementally through back-and-forth dialogue
- **Concrete Examples First**: Start with practical examples before abstract concepts
- **Visual Representations**: Use diagrams, lists, and structured formatting to organize information
- **Knowledge Connections**: Explicitly connect new concepts to previously discussed topics
- **Context Switching Awareness**: Provide clear transitions when changing topics
- **Pragmatic Over Theoretical**: Focus on practical applications before deep theoretical explanations
- **Technical Depth On Demand**: Allow diving deeper into topics through natural conversation flow
- **Chunked Information**: Break complex subjects into manageable, focused segments
- **Metaphor & Analogy**: Use relatable comparisons to explain complex technical concepts

### Communication Features
- **TL;DR Summaries**: Provide brief summaries at the beginning of longer explanations
- **Hierarchical Structure**: Present information with clear headings and subheadings
- **Highlighted Key Points**: Use bold or emphasis for critical concepts
- **Progressive Disclosure**: Start with core concepts, then reveal additional complexity as needed
- **Varied Formats**: Mix code examples, explanations, and analogies to maintain engagement
- **Explicit Connections**: Clearly state how new information relates to the user's specific questions
- **Technical Accuracy**: Maintain precision while using accessible language

## DESIGN PRINCIPLES

### Security-First Development
- **Data Protection**: Always use secure storage for sensitive data
- **Encryption**: Implement proper encryption for sensitive data both at rest and in transit
- **Secure Communication**: Use HTTPS for all API communications with appropriate security measures
- **Input Validation**: Always validate user input and external data before processing
- **Error Handling**: Implement comprehensive error handling for security operations
- **Least Privilege**: Request only the permissions your application absolutely needs
- **Secure Defaults**: Configure security features with secure defaults that don't require user intervention

### User-Centric Design
- **Clear User Choices**: Design interfaces with clear, unambiguous labels and outcomes
- **Response Context**: Maintain enough context to make choices meaningful
- **Privacy Considerations**: Avoid showing sensitive information in previews
- **Fallback Mechanisms**: Always provide degraded but functional experience when premium features aren't available
- **Interactive Feedback**: Provide immediate feedback when users interact with interfaces
- **Response Handling**: Design robust systems for processing and persisting user responses

### Progressive Enhancement Architecture
- **Core Functionality First**: Build essential features that work for all users before adding enhancements
- **Modular Design**: Create self-contained modules that can be enabled/disabled based on conditions
- **Feature Detection**: Check for feature availability at runtime rather than compile time
- **Graceful Degradation**: Ensure applications function acceptably when premium features are unavailable
- **Clear Upgrade Paths**: Show users what additional features they gain by upgrading
- **State Preservation**: Maintain user preferences and state across changes

### Responsive Interaction Design
- **Immediate Feedback**: Provide visual feedback immediately after user actions
- **Async Operation Indicators**: Show loading indicators for operations that take time
- **Error Recovery**: Design interfaces that help users recover from errors
- **Appropriate Animation**: Use animations to clarify transitions and relationships
- **Accessibility Support**: Ensure all interactions work well with assistive technologies
- **Adaptable Layouts**: Design interfaces that adapt to different device sizes and orientations
- **Input Forgiving**: Be tolerant of minor user input errors and provide correction suggestions
- **Operation Cancellation**: Allow users to cancel long-running operations

## DEVELOPMENT PRINCIPLES

### Component Modularity
- **Single-Purpose Components**: Design classes and modules with clear, focused responsibilities
- **Interface Segregation**: Create narrow, purpose-specific interfaces rather than general-purpose ones
- **Dependency Injection**: Pass dependencies explicitly rather than hardcoding them
- **Composable Design**: Build small, reusable components that can be combined for complex functionality
- **Testable Boundaries**: Create clear boundaries between components to facilitate unit testing
- **State Isolation**: Contain state within components rather than using global state
- **Event-Based Communication**: Use delegation patterns and notifications for loose coupling
- **Clean APIs**: Design intuitive, well-documented APIs for all reusable components

### Efficient Resource Management
- **Battery/Resource Awareness**: Minimize operations to preserve system resources
- **Memory Optimization**: Properly manage object lifecycles to avoid memory leaks
- **Resource Cleanup**: Release resources promptly when no longer needed
- **Background Task Management**: Use proper APIs for background execution with completion handlers
- **Caching Strategy**: Implement appropriate caching for responses and expensive computations
- **Cold Start Optimization**: Minimize initialization code for faster application startup
- **Lazy Loading**: Defer resource-intensive operations until needed
- **Bandwidth Consciousness**: Minimize data transfer and compress data when appropriate

### Comprehensive Test Coverage
- **Unit Test Foundation**: Write unit tests for all business logic and utility functions
- **Mocking External Dependencies**: Create mock implementations of external services for testing
- **UI Testing**: Implement UI tests for critical user flows
- **Edge Case Coverage**: Test boundary conditions and unusual inputs
- **Error Path Testing**: Verify appropriate behavior when errors occur
- **Performance Testing**: Benchmark performance-critical operations
- **Memory Testing**: Check for memory leaks
- **Integration Testing**: Test integration points between components
- **Regression Testing**: Run full test suite before releases to catch regressions

### Pragmatic Code Organization
- **Feature-Based Structure**: Organize code by feature rather than by type
- **Consistent Naming**: Use clear, consistent naming conventions for all code elements
- **Self-Documenting Code**: Write code that clearly expresses intent without extensive comments
- **Appropriate Abstraction**: Create abstractions only when they provide clear benefits
- **Code Locality**: Keep related code close together
- **Manageable File Size**: Keep files to a reasonable size
- **Clear Control Flow**: Use guard clauses and early returns for simplified control flow
- **Minimal Nesting**: Avoid deeply nested code structures

### Error Handling
- **Never silently swallow exceptions**
- **Log errors with appropriate context**
- **Return meaningful error messages to users**
- **Fail fast when detecting invalid states**
- **Use structured error responses for APIs**

### Performance Optimization
- **Profile code regularly to identify bottlenecks**
- **Optimize critical paths for speed and resource usage**
- **Use pagination for large data sets**
- **Implement caching where appropriate**
- **Minimize network requests and payload sizes**

## 🛡️ DEFENSIVE PROGRAMMING & PERFORMANCE (FIRST PRINCIPLES)

### Rust-Like Ownership Model in Python
- **IMMUTABLE DATA STRUCTURES**: Use Pydantic models, attrs classes, and dataclasses with frozen=True
- **ZERO-COPY OPERATIONS**: Leverage Pydantic's Rust core for validation without Python overhead
- **EXPLICIT RESOURCE MANAGEMENT**: Use context managers and RAII patterns for all resources
- **FAIL-FAST VALIDATION**: Validate data at system boundaries, never trust external input
- **MEMORY SAFETY**: Use type hints, runtime validation, and memory profiling to prevent leaks
- **OWNERSHIP TRANSFER**: Use Result/Option types instead of exceptions for control flow

### Pydantic Model Design Principles (NON-NEGOTIABLE)
- **ALL DATA MODELS MUST USE PYDANTIC**: No plain dictionaries or unvalidated data structures
- **STRICT VALIDATION**: Use `str_strict=True`, `validate_default=True`, and custom validators
- **IMMUTABLE BY DEFAULT**: Use `frozen=True` for all Pydantic models unless mutation is essential
- **FIELD CONSTRAINTS**: Every field must have appropriate constraints (min_length, max_length, ge, le)
- **CUSTOM VALIDATORS**: Implement business logic validation using Pydantic validators
- **TYPE SAFETY**: Use Union types, Literal types, and Generic types for precise type definitions
- **SERIALIZATION CONTROL**: Define explicit `model_dump()` and `model_validate()` patterns
- **ERROR HANDLING**: Use Pydantic's ValidationError for structured error responses

### Memory & Performance First Principles
- **MANDATORY PROFILING**: Every function >10 lines must have performance benchmarks
- **MEMORY ALLOCATION TRACKING**: Use `tracemalloc` and `memray` for memory monitoring
- **CPU PROFILING**: Use `py-spy` for production profiling without code changes
- **BENCHMARK-DRIVEN DEVELOPMENT**: Write benchmarks before optimizing, measure before/after
- **LAZY EVALUATION**: Defer expensive operations until absolutely necessary
- **EFFICIENT DATA STRUCTURES**: Use appropriate collections (set vs list, deque vs list)
- **MINIMAL OBJECT CREATION**: Reuse objects, use object pools for expensive instantiation
- **ALGORITHMIC COMPLEXITY**: Every algorithm must document its O(n) complexity

### Type Safety & Runtime Validation
- **BEARTYPE EVERYWHERE**: Use @beartype decorator on all public functions
- **MYPY STRICT MODE**: Code must pass `mypy --strict` without any ignores
- **RUNTIME TYPE CHECKING**: Use typeguard for critical runtime type validation
- **EXHAUSTIVE PATTERN MATCHING**: Use match/case statements for enum handling
- **NO ANY TYPES**: Explicit types for all variables, parameters, and return values
- **GENERIC CONSTRAINTS**: Use TypeVar bounds and constraints for generic functions
- **PROTOCOL DEFINITIONS**: Define interfaces using typing.Protocol
- **LITERAL TYPES**: Use Literal for string/int constants to prevent typos

### Defensive Programming Patterns
- **RESULT TYPES**: Use Result[T, E] pattern instead of exceptions for expected failures
- **OPTION TYPES**: Use Optional[T] explicitly, never return None without type annotation
- **GUARD CLAUSES**: Validate inputs immediately, fail fast on invalid data
- **INVARIANT CHECKING**: Assert preconditions, postconditions, and loop invariants
- **SAFE DEFAULTS**: Always provide sensible defaults, never leave fields uninitialized
- **BOUNDARY VALIDATION**: Validate all external inputs (API, file, user data)
- **STATE MACHINE VALIDATION**: Ensure objects can only transition between valid states
- **COMPREHENSIVE ERROR MESSAGES**: Include context, expected vs actual values in errors

### Code Performance Quality Gates (MANDATORY)
- **BENCHMARK REGRESSION TESTS**: Performance must not degrade >5% between commits
- **MEMORY LEAK DETECTION**: No memory growth >1MB in 1000 iterations of core functions
- **CPU EFFICIENCY**: O(n) operations must complete within expected time bounds
- **CACHE HIT RATES**: Critical paths must maintain >90% cache hit rate
- **ALLOCATION LIMITS**: Functions must not allocate >1MB of temporary objects
- **PROFILING COVERAGE**: 100% of public functions must have performance benchmarks
- **SCALABILITY TESTING**: Test with 10x, 100x, 1000x expected load
- **RESOURCE CLEANUP**: All resources must be properly released (no file handle leaks)

## LANGUAGE-SPECIFIC PRINCIPLES

### Python Development (Enhanced with Performance & Safety)
- **Target Python 3.11+ compatibility** (for performance improvements)
- **MANDATORY TYPE HINTS**: 100% type coverage, no `Any` types except at system boundaries
- **Follow PEP 8 + Defensive Programming**: Code style + safety patterns
- **PYDANTIC-FIRST DATA MODELING**: All data structures use Pydantic models
- **IMMUTABLE BY DEFAULT**: Use frozen dataclasses and Pydantic models
- **CONTEXT MANAGERS EVERYWHERE**: Resource management with explicit cleanup
- **RESULT TYPES**: Use Result[T, E] pattern for error handling instead of exceptions
- **BEARTYPE RUNTIME VALIDATION**: All public functions decorated with @beartype
- **PERFORMANCE BENCHMARKING**: pytest-benchmark for all critical functions
- **MEMORY PROFILING**: Use memray/tracemalloc for memory leak detection
- **COMPOSITION OVER INHERITANCE**: Favor dependency injection and composition
- **EXPLICIT ERROR HANDLING**: Structured errors with context and remediation suggestions
- **API DESIGN**: Follow Rust principles of ownership, borrowing, and explicit lifetime management

## ARCHITECTURAL/SYSTEM DESIGN PRINCIPLES

### Serverless Architecture Principles
- **Build vs. Runtime Awareness**: Recognize that build-time and runtime environments are separate
- **Phase-Based Deployment**: Structure code to account for the distinct phases of serverless deployment
- **Dependency Resolution**: Ensure critical dependencies are explicitly available when needed
- **Function Isolation**: Design with the understanding that each serverless function deploys as an isolated unit
- **Defensive Module Resolution**: Implement fallback mechanisms for essential dependencies
- **Cold Start Optimization**: Minimize initialization code to reduce latency
- **Stateless Design**: Assume functions have no persistent local state between invocations
- **Error Resilience**: Add comprehensive error handling for ephemeral execution environments

### Package Resolution Management
- **Configuration Consistency**: Never use conflicting strategies for the same package
- **Dual Import Strategy**: Use type-only imports for build-time and dynamic imports for runtime
- **Progressive Enhancement**: Start with minimal dependency configurations, then address specific issues
- **Framework-Specific Patterns**: Learn and follow the specific module resolution patterns of your framework
- **Multi-Phase Testing**: Test builds across different environments to identify issues early
- **Defensive Module Mocking**: Create lightweight mock implementations of critical dependencies
- **Resolution Debugging**: Add explicit logging of module paths to diagnose issues

### Authentication State Management
- **Centralized Auth State**: Maintain a single source of truth for authentication state
- **Token Lifecycle Tracking**: Implement comprehensive token lifecycle management
- **Seamless Re-authentication**: Provide graceful re-authentication flows when tokens expire
- **Auth State Propagation**: Broadcast authentication state changes to dependent components
- **Request Queue Management**: Queue non-critical API requests during authentication transitions
- **Persistent Session Handling**: Properly persist and restore authentication sessions across restarts
- **Auth Failure Recovery**: Implement smart recovery strategies for authentication failures
- **Contextual Login Prompts**: Show authentication requests only in appropriate contexts

### Database Management
- Use appropriate ORM for database operations
- Prefer relational databases for relational data needs
- Implement proper indexing for frequently queried fields
- Use migrations for all schema changes
- Enforce referential integrity at the database level
- Organize routes by resource and functionality
- Implement middleware for cross-cutting concerns
- Separate business logic from API handlers
- Use proper HTTP status codes and response formats
- Validate all inputs at the API boundary

## DOCUMENTATION PRACTICES

### Code Documentation
- Document all public APIs with clear examples
- Keep documentation close to code (use inline comments)
- Write README files for each major component
- Use diagrams for complex architectures
- Update documentation when code changes
- Use meaningful commit messages that explain why, not just what

### Project Documentation
- Maintain up-to-date architecture diagrams
- Document system dependencies and interfaces
- Include setup and installation instructions
- Provide troubleshooting guides for common issues
- Document environment configuration requirements
- Keep a changelog for tracking version changes
- Include deployment procedures and requirements
- Document testing strategies and tools

## CI/CD PRACTICES

### Continuous Integration
- Run automated tests on each commit
- Use linters to enforce code style
- Perform static code analysis
- Check for security vulnerabilities in dependencies
- Require code reviews before merging

### Version Control
- Write meaningful commit messages that explain why, not just what
- Keep pull requests small and focused on a single change
- Use feature branches for all new development
- Rebase feature branches before merging
- Never commit secrets or sensitive data

### Monitoring and Maintenance
- Implement comprehensive logging
- Set up error tracking and alerting
- Monitor performance metrics
- Track API usage and response times
- Set up uptime monitoring

### Versioning
- Use semantic versioning for all components
- Document breaking changes clearly
- Maintain backward compatibility when possible
- Provide migration guides for major updates
- Support multiple versions during transition periods

## SECURITY PRACTICES

### Data Protection
- Encrypt sensitive data at rest and in transit
- Use HTTPS for all API communications
- Implement proper authentication and authorization
- Sanitize all user inputs to prevent injection attacks
- Implement rate limiting for public endpoints

### Secret Management
- Never hardcode secrets in source code
- Use environment variables for configuration
- Rotate API keys and secrets regularly
- Implement proper access controls for secrets
- Use secure storage for credentials

## RECENT LEARNINGS

### Security Implementation Patterns
- **Encryption Key Management**: Derive encryption keys rather than storing them directly
- **Operation Atomicity**: Design security operations to be atomic to prevent partial failures
- **Explicit Error Cases**: Define specific error types for each security failure mode
- **Security State Validation**: Validate current security state before performing sensitive operations
- **Defense in Depth**: Implement multiple complementary security measures

### Serverless Decision Tree Approach
- Identify the analysis type (static vs. dynamic)
- Determine isolation boundaries (function-level vs. service-level)
- Choose compatible resolution strategies based on platform
- Build defensive validation across environments
- Implement import-free patterns for problematic dependencies

### Debugging Principles
- **Root Cause Analysis**: Systematically work backward from symptoms to identify underlying issues
- **Consistent Environment Parity**: Ensure development and production environments have identical dependencies
- **Visual Debugging**: Use visual indicators and high-contrast styles when debugging UI components
- **Cross-Environment Validation**: Test in both local and deployment environments before finalizing
- **Dependency Tracking**: Explicitly track all required dependencies in package.json, including devDependencies
- **Incremental Verification**: Make small, verifiable changes when debugging rather than large-scale modifications
- **Component Isolation**: Debug components in isolation before integrating them into the full system
- **Document Debugging Patterns**: Record successful debugging approaches for future reference
- **Error Boundary Implementation**: Add error boundaries at key component junctions to isolate failures
- **Console Logging Strategy**: Use structured, clearly labeled console logging during development
